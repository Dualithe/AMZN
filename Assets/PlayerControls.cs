//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Keyboard/Mouse"",
            ""id"": ""76406a1e-7fcc-42f0-a349-02392e267ff0"",
            ""actions"": [
                {
                    ""name"": ""MoveUp"",
                    ""type"": ""Button"",
                    ""id"": ""4d0ccc38-f445-40bc-ad15-baa26c8f2694"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDown"",
                    ""type"": ""Button"",
                    ""id"": ""122737f6-8406-4850-9906-c98fd65ade7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveLeft"",
                    ""type"": ""Button"",
                    ""id"": ""bdbb4f9f-75ba-4e79-bd3f-f0f8846085c5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveRight"",
                    ""type"": ""Button"",
                    ""id"": ""686648a2-00a7-4444-bd59-9db56b32fc0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""c37579a7-c5ba-4a9e-a445-3e4d6323d9d7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""94099866-3db4-4a3a-a015-e59ebacf1a53"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c68d668f-fe52-4324-aec8-554e33567f85"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""MoveLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e2b8f80-5369-4906-8268-a3d1bde6c577"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""MoveRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85164604-e630-4b40-9d0b-4135a6b09856"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""MoveUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8180f743-36cf-4686-9d47-a7407d800ebd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Default"",
                    ""action"": ""MoveDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c75e1e36-00a9-4d36-ad92-563dcdd962bb"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""509ac979-69db-4725-ae22-92e03870b6e4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Default"",
            ""bindingGroup"": ""Default"",
            ""devices"": []
        }
    ]
}");
        // Keyboard/Mouse
        m_KeyboardMouse = asset.FindActionMap("Keyboard/Mouse", throwIfNotFound: true);
        m_KeyboardMouse_MoveUp = m_KeyboardMouse.FindAction("MoveUp", throwIfNotFound: true);
        m_KeyboardMouse_MoveDown = m_KeyboardMouse.FindAction("MoveDown", throwIfNotFound: true);
        m_KeyboardMouse_MoveLeft = m_KeyboardMouse.FindAction("MoveLeft", throwIfNotFound: true);
        m_KeyboardMouse_MoveRight = m_KeyboardMouse.FindAction("MoveRight", throwIfNotFound: true);
        m_KeyboardMouse_Throw = m_KeyboardMouse.FindAction("Throw", throwIfNotFound: true);
        m_KeyboardMouse_Pickup = m_KeyboardMouse.FindAction("Pickup", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keyboard/Mouse
    private readonly InputActionMap m_KeyboardMouse;
    private IKeyboardMouseActions m_KeyboardMouseActionsCallbackInterface;
    private readonly InputAction m_KeyboardMouse_MoveUp;
    private readonly InputAction m_KeyboardMouse_MoveDown;
    private readonly InputAction m_KeyboardMouse_MoveLeft;
    private readonly InputAction m_KeyboardMouse_MoveRight;
    private readonly InputAction m_KeyboardMouse_Throw;
    private readonly InputAction m_KeyboardMouse_Pickup;
    public struct KeyboardMouseActions
    {
        private @PlayerControls m_Wrapper;
        public KeyboardMouseActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUp => m_Wrapper.m_KeyboardMouse_MoveUp;
        public InputAction @MoveDown => m_Wrapper.m_KeyboardMouse_MoveDown;
        public InputAction @MoveLeft => m_Wrapper.m_KeyboardMouse_MoveLeft;
        public InputAction @MoveRight => m_Wrapper.m_KeyboardMouse_MoveRight;
        public InputAction @Throw => m_Wrapper.m_KeyboardMouse_Throw;
        public InputAction @Pickup => m_Wrapper.m_KeyboardMouse_Pickup;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardMouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardMouseActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardMouseActions instance)
        {
            if (m_Wrapper.m_KeyboardMouseActionsCallbackInterface != null)
            {
                @MoveUp.started -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnMoveUp;
                @MoveUp.performed -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnMoveUp;
                @MoveUp.canceled -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnMoveUp;
                @MoveDown.started -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnMoveDown;
                @MoveDown.performed -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnMoveDown;
                @MoveDown.canceled -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnMoveDown;
                @MoveLeft.started -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.performed -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnMoveLeft;
                @MoveLeft.canceled -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnMoveLeft;
                @MoveRight.started -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnMoveRight;
                @MoveRight.performed -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnMoveRight;
                @MoveRight.canceled -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnMoveRight;
                @Throw.started -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnThrow;
                @Pickup.started -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_KeyboardMouseActionsCallbackInterface.OnPickup;
            }
            m_Wrapper.m_KeyboardMouseActionsCallbackInterface = instance;
            if (instance != null)
            {
                @MoveUp.started += instance.OnMoveUp;
                @MoveUp.performed += instance.OnMoveUp;
                @MoveUp.canceled += instance.OnMoveUp;
                @MoveDown.started += instance.OnMoveDown;
                @MoveDown.performed += instance.OnMoveDown;
                @MoveDown.canceled += instance.OnMoveDown;
                @MoveLeft.started += instance.OnMoveLeft;
                @MoveLeft.performed += instance.OnMoveLeft;
                @MoveLeft.canceled += instance.OnMoveLeft;
                @MoveRight.started += instance.OnMoveRight;
                @MoveRight.performed += instance.OnMoveRight;
                @MoveRight.canceled += instance.OnMoveRight;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
            }
        }
    }
    public KeyboardMouseActions @KeyboardMouse => new KeyboardMouseActions(this);
    private int m_DefaultSchemeIndex = -1;
    public InputControlScheme DefaultScheme
    {
        get
        {
            if (m_DefaultSchemeIndex == -1) m_DefaultSchemeIndex = asset.FindControlSchemeIndex("Default");
            return asset.controlSchemes[m_DefaultSchemeIndex];
        }
    }
    public interface IKeyboardMouseActions
    {
        void OnMoveUp(InputAction.CallbackContext context);
        void OnMoveDown(InputAction.CallbackContext context);
        void OnMoveLeft(InputAction.CallbackContext context);
        void OnMoveRight(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
}
